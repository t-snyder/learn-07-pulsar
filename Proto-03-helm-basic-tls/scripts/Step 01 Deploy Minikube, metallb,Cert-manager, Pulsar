#!/bin/bash

# The following scripting is based upon a Pulsar tutorial for running Pulsar in Kubernetes on
# minikube. The url for the tuturial is:
# https://pulsar.apache.org/docs/4.0.x/getting-started-helm/

# Step 1 - Deploys and configures the following:
#            a) minikube, minikube addons (dashboard, metrics-server);
#            b) configures encryption for etcd storage
#            c) creates metallb loadbalancer
#            d) deploys Kubernetes Gateway API crds (cert-manager deploy uses)
#            e) deploys istio in Ambient mode.
#            f) deploys Cert-Manager
#            g) deploys Pulsar and all required components into the Cluster
#            h) Sets pulsar namespace to istio ambient mode which initiates mTLS between pods
#            f) Tests access from the Pulsar CLI client
#            g) Allows running of the simple java test program (eclipse, maven) found in the
#               pulsar-client directory within this project.

# This learning prototypes were developed and tested using the following:
#   a) Ubuntu             - 20.04.6 LTS
#   b) Minikube           - 1.34.0
#   c) Kubernetes         - 1.31.0
#   d) Docker             - 27.2.0
#   e) Metallb                - 0.9.6
#   f) Kubernetes Gateway API - 1.2.0
#   g) Istio (Ambient Mode)   - 1.23.2
#   h) Cert-Manager           - 1.15.5
#   i) Machine config - Processor - Intel® Core™ i7-7700K CPU @ 4.20GHz × 8 
#                       Memory    - 64 GB
#  
# Pulsar deployment
# The following deployment was initially generated by running a dry-run from the Pulsar
# minikube Helm chart as follows:
# helm install --dry-run --values ${PROTODIR}/helm/values-minikube.yaml --namespace pulsar pulsar-mini apache/pulsar > kube-pulsar.txt
# From this output the kube deployment components were obtained. This script does a minimal
# installation of only the main required Pulsar components.
#   Component   # Deployed
#    Zookeeper       3
#    Bookie          4
#    Toolset         1
#    Broker          3
#    Proxy           3
# Only the basic elements are deployed - so no PodMonitor, Prometheus, Graphana, PodDisrutpion, etc.
#           
#################################################################################################
##### Note - Only if it has not already been installed to your dev machine do you need to do this step.
# Install pulsarctl from streamnative - Installs to $HOME/.pulsarctl
sudo bash -c "$(curl -fsSL https://raw.githubusercontent.com/streamnative/pulsarctl/master/install.sh)"
#################################################################################################
#
# Open terminal 1
# Delete prior minikube ( if used and configured prior)
minikube delete

# Start minikube - configure the settings to your requirements and hardware
# Note - normally I use kvm2 as the vm-driver. However istio cni in ambient mode does not
# currently work with kvm2 due to cni incompatibility. The work around is to use the 
# docker vm-driver.
minikube start --cpus 4 --memory 12288 --vm-driver docker --cni kindnet --disk-size 100g

# Addons
minikube addons enable dashboard

# Deploy the addon loadbalancer metallb
minikube addons enable metallb

# Configure loadbalancer ip address range within the same range as the minikube ip
# The configuration is a start ip ( ie. 192.168.49.20 ) and an end ip that makes a 
# range of 10 ip addresses. The range should not overlap the minikube ip
minikube ip
minikube addons configure metallb
  -- Enter Load Balancer Start IP: 
  -- Enter Load Balancer End IP:

# Start dashboard
minikube dashboard

############## Open up a new (2nd) terminal ###################################
# Install the Kubernetes Gateway API CRDs (experimental also includes standard)
kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.2.0/experimental-install.yaml

# Install istio in ambient mode
istioctl install --set values.pilot.env.PILOT_ENABLE_ALPHA_GATEWAY_API=true --set profile=ambient --skip-confirmation

#### Install cert-manager with the following steps ####
# Create cert-manger namespace
kubectl create namespace cert-manager

# Deploy cert-manager gateway CRDs
kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.5/cert-manager.crds.yaml

# Deploy cert-manager with gateway api enabled including the experimental gateway apis
helm install cert-manager --version 1.15 jetstack/cert-manager --namespace cert-manager \
  --set config.apiVersion="controller.config.cert-manager.io/v1alpha1" \
  --set config.kind="ControllerConfiguration" \
  --set config.enableGatewayAPI=true \
  --set "extraArgs={--feature-gates=ExperimentalGatewayAPISupport=true}"

# Project Directory
PROTODIR=/media/tim/ExtraDrive1/Projects/learn-07-pulsar/Proto-03-helm-basic-tls

# Create pulsar namespace
kubectl create namespace pulsar

# Prepare for deployment by generating tokens and keys for super users
$PROTODIR/pulsar-helm-chart/scripts/pulsar/prepare_helm_release.sh -n pulsar -k pulsar-mini

# Deploy pulsar to minikube via Helm chart
helm install --values ${PROTODIR}/helm/values-03.yaml --namespace pulsar pulsar-mini apache/pulsar

# Wait until all the pods are ready
kubectl -n pulsar wait --timeout=10m --for=condition=Ready pod/pulsar-mini-proxy-2

# To verify exverything is up and running
kubectl get pods -n pulsar
kubectl get services -n pulsar

# Create tenants, namespaces and topics from within the toolset container
kubectl exec -it -n pulsar pulsar-mini-toolset-0 -- /bin/bash

# Create a tenant
bin/pulsar-admin tenants create apache
bin/pulsar-admin tenants list

# Create a namespace
bin/pulsar-admin namespaces create apache/pulsar
bin/pulsar-admin namespaces list apache

# Create a test topic with 4 partitions
bin/pulsar-admin topics create-partitioned-topic apache/pulsar/test-topic -p 4
bin/pulsar-admin topics list-partitioned-topics apache/pulsar

exit


# Set pulsar namespace to istio ambient mode (ie. no sidecar) also initiates mTls
kubectl label namespace pulsar istio.io/dataplane-mode=ambient

# Set the path for the Pulsar client CLI
export PULSAR_HOME=${PROTODIR}/bin/apache-pulsar-4.0.2

# Determine the exposed proxy url
kubectl get services -n pulsar pulsar-mini-proxy

# Note - the ip address to use is different from the pulsar instructions because we have
# installed the metallb loadbalancer which provides an external ip address for the service.
# So if the output from the above is:
NAME                TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)                       AGE
pulsar-mini-proxy   LoadBalancer   10.98.238.247   192.168.49.20   443:30885/TCP,6651:31993/TCP   152m

# The following variables need to be updated in the ${PULSAR_HOME}/conf/client.conf file.Using
# the information output above (Yours will probably be different):
webServerUrl=http://192.168.49.20:443
brokerServerUrl=pulsar://192.168.49.20:6651/
# Save and exit

#Open a different terminal and start a consumer
PROTODIR=/media/tim/ExtraDrive1/Projects/learn-07-pulsar/Proto-03-helm-basic-tls
export PULSAR_HOME=${PROTODIR}/bin/apache-pulsar-4.0.2

${PULSAR_HOME}/bin/pulsar-client consume -s sub apache/pulsar/test-topic  -n 0

#Open a different terminal and start a producer and generate 10 messages
PROTODIR=/media/tim/ExtraDrive1/Projects/learn-07-pulsar/Proto-03-helm-basic-tls
export PULSAR_HOME=${PROTODIR}/bin/apache-pulsar-4.0.2

${PULSAR_HOME}/bin/pulsar-client produce apache/pulsar/test-topic  -m "---------hello apache pulsar-------" -n 10

#You should see a series of the following
# ----- got message -----
# ----------hello apache pulsar--------

##################################################################################
# Now to test the java pulsar client with tls
#
# First obtain the Pulsar CA tls certificate and place a copy in the project resource
# directory
CLIENT_PATH=$PROTODIR/../pulsar-client/src/main/resources
kubectl get secret pulsar-mini-ca-tls -n pulsar -o "jsonpath={.data['ca\.crt']}" | base64 -d > $CLIENT_PATH/tls.crt

# From within the project (I use Eclipse) ensure that within the PulsarClientMain class
# the static final tls var is set to true.
#
# Run the pulsar-client configuration
# Don't forget to refresh the eclipse project to pull in the tls.crt
